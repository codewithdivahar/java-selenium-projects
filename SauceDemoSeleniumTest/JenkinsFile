pipeline {
    agent any

    parameters {
        choice(
            name: 'BROWSER',
            choices: ['chrome-headless', 'chrome'],
            description: 'Select browser for test execution'
        )
        choice(
            name: 'TEST_SUITE',
            choices: ['all', 'login', 'products', 'cart'],
            description: 'Select test suite to run'
        )
    }

    tools {
        maven 'Maven-3.9.11'
    }

    environment {
        MAVEN_OPTS = '-Xmx1024m'
        PROJECT_DIR = 'SauceDemoSeleniumTest'
        // Will be set dynamically if we start a Selenium container
        SELENIUM_REMOTE_URL = ''
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from GitHub...'
                checkout scm
                script {
                    echo "Branch: ${env.GIT_BRANCH}"
                    echo "Build Number: ${env.BUILD_NUMBER}"
                    echo "Working in project: ${env.PROJECT_DIR}"
                }
            }
        }

        stage('Environment Check') {
            steps {
                echo 'Checking environment and project structure...'
                sh 'java -version'
                sh 'mvn -version'
                sh 'command -v google-chrome >/dev/null 2>&1 && google-chrome --version || echo "google-chrome not found"'
                sh 'ls -la'
                sh "ls -la ${env.PROJECT_DIR}/"
                sh "ls -la ${env.PROJECT_DIR}/src/ || echo 'No src directory'"
            }
        }

        stage('Browser/Driver Provisioning') {
            steps {
                script {
                    // Try local Chrome first; if not present, try to spin up Selenium container
                    def hasChrome = sh(script: 'command -v google-chrome >/dev/null 2>&1', returnStatus: true) == 0
                    if (hasChrome) {
                        echo 'Local Google Chrome found. Tests will run via local Chrome + WebDriverManager.'
                    } else {
                        echo 'Local Google Chrome not found.'
                        def hasDocker = sh(script: 'command -v docker >/dev/null 2>&1', returnStatus: true) == 0
                        if (hasDocker) {
                            echo 'Starting Selenium standalone Chrome container...'
                            sh '''
                              set -eux
                              docker rm -f selenium || true
                              docker run -d --name selenium -p 4444:4444 -p 7900:7900 --shm-size="2g" selenium/standalone-chrome:126.0
                              # wait for Grid up
                              timeout 60 bash -c 'until curl -sf http://localhost:4444/wd/hub/status | grep -q "\"ready\": true"; do sleep 2; done'
                            '''
                            env.SELENIUM_REMOTE_URL = 'http://localhost:4444/wd/hub'
                            echo "Selenium Grid is up at ${env.SELENIUM_REMOTE_URL}"
                        } else {
                            echo '''
                            Neither local Google Chrome nor Docker is available.
                            Options:
                              1) Install Google Chrome on this agent; or
                              2) Install Docker and let the pipeline start selenium/standalone-chrome; or
                              3) Configure a Jenkins agent that has Chrome.
                            '''
                            error('No browser available for UI tests.')
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building the SauceDemo Selenium project...'
                dir(env.PROJECT_DIR) {
                    sh 'pwd'
                    sh 'ls -la'
                    sh 'mvn clean compile -DskipTests'
                    echo 'Build completed successfully!'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running Selenium tests...'
                dir(env.PROJECT_DIR) {
                    script {
                        // Base command built from your params
                        def testCommand = "mvn test -P${params.BROWSER}"
                        if (params.BROWSER == 'chrome-headless') {
                            testCommand += " -Dheadless=true"
                        }
                        if (params.TEST_SUITE != 'all') {
                            testCommand += " -Dtest=*${params.TEST_SUITE.capitalize()}Test"
                        }

                        // If we started a Selenium container, tell tests to use RemoteWebDriver
                        // Your BaseTest should look for SELENIUM_REMOTE_URL and use RemoteWebDriver when set.
                        if (env.SELENIUM_REMOTE_URL?.trim()) {
                            echo "Using Selenium Grid at ${env.SELENIUM_REMOTE_URL}"
                            withEnv(["SELENIUM_REMOTE_URL=${env.SELENIUM_REMOTE_URL}", "browser=chrome"]) {
                                echo "Executing command: ${testCommand} (RemoteWebDriver)"
                                try {
                                    sh testCommand
                                    echo "Tests completed successfully (remote)."
                                } catch (Exception e) {
                                    echo "Tests failed but continuing with reports: ${e.message}"
                                    currentBuild.result = 'UNSTABLE'
                                } finally {
                                    // stop selenium container
                                    sh 'docker rm -f selenium || true'
                                }
                            }
                        } else {
                            // Local Chrome path (WebDriverManager will fetch matching chromedriver)
                            echo "Executing command: ${testCommand} (local Chrome)"
                            try {
                                sh testCommand
                                echo "Tests completed successfully (local)."
                            } catch (Exception e) {
                                echo "Tests failed but continuing with reports: ${e.message}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
            }
            post {
                always {
                    echo 'Publishing test results...'
                    dir(env.PROJECT_DIR) {
                        // If you use JUnit/TestNG plugin, you can switch to junit if needed:
                        // junit 'target/surefire-reports/*.xml'
                        publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'

                        archiveArtifacts artifacts: 'test-output/**/*',
                                         fingerprint: true,
                                         allowEmptyArchive: true

                        script {
                            if (fileExists('test-output')) {
                                publishHTML([
                                    allowMissing: true,
                                    alwaysLinkToLastBuild: true,
                                    keepAll: true,
                                    reportDir: 'test-output',
                                    reportFiles: '*.html',
                                    reportName: 'SauceDemo Test Report'
                                ])
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'SauceDemo pipeline execution completed'
        }
        success {
            echo 'SauceDemo tests passed successfully!'
        }
        failure {
            echo 'SauceDemo pipeline failed!'
        }
        unstable {
            echo 'Some SauceDemo tests failed - build is unstable'
        }
    }
}
