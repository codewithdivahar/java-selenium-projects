pipeline {
    agent any

    parameters {
        choice(
            name: 'BROWSER',
            choices: ['chrome-headless', 'chrome'],
            description: 'Select browser for test execution'
        )
        choice(
            name: 'TEST_SUITE',
            choices: ['all', 'login', 'products', 'cart'],
            description: 'Select test suite to run'
        )
    }

    tools {
        maven 'Maven-3.9.11'
    }

    environment {
        MAVEN_OPTS = '-Xmx1024m'
        PROJECT_DIR = 'SauceDemoSeleniumTest'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from GitHub...'
                checkout scm
                script {
                    echo "Branch: ${env.GIT_BRANCH}"
                    echo "Build Number: ${env.BUILD_NUMBER}"
                    echo "Working in project: ${env.PROJECT_DIR}"
                }
            }
        }

        stage('Install Chrome (if missing)') {
            steps {
                sh '''
                  set -eux

                  # Already present?
                  if command -v google-chrome >/dev/null 2>&1; then
                    echo "Found existing Chrome: $(google-chrome --version)"
                    exit 0
                  fi
                  if command -v chromium >/dev/null 2>&1 || command -v chromium-browser >/dev/null 2>&1; then
                    echo "Found existing Chromium."
                    # Ensure a google-chrome alias exists
                    if command -v sudo >/dev/null 2>&1; then SUDO="sudo"; else SUDO=""; fi
                    $SUDO ln -sf "$(command -v chromium || command -v chromium-browser)" /usr/local/bin/google-chrome || true
                    google-chrome --version || true
                    exit 0
                  fi

                  # Detect OS family
                  OS_ID="$(. /etc/os-release 2>/dev/null || true; echo ${ID:-})"
                  if command -v sudo >/dev/null 2>&1; then SUDO="sudo"; else SUDO=""; fi

                  if [ "$OS_ID" = "ubuntu" ] || [ "$OS_ID" = "debian" ]; then
                    # Debian/Ubuntu: install Google Chrome, fallback to Chromium
                    $SUDO apt-get update
                    $SUDO apt-get install -y wget gnupg ca-certificates
                    $SUDO install -m 0755 -d /etc/apt/keyrings
                    wget -qO- https://dl.google.com/linux/linux_signing_key.pub | \
                      $SUDO gpg --dearmor -o /etc/apt/keyrings/google-linux.gpg
                    echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/google-linux.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | \
                      $SUDO tee /etc/apt/sources.list.d/google-chrome.list
                    $SUDO apt-get update
                    # Try Chrome first
                    $SUDO apt-get install -y google-chrome-stable || true

                    if ! command -v google-chrome >/dev/null 2>&1; then
                      echo "Chrome install failed or repo blocked; falling back to Chromium."
                      $SUDO apt-get install -y chromium || $SUDO apt-get install -y chromium-browser || true
                      if command -v chromium >/dev/null 2>&1 || command -v chromium-browser >/dev/null 2>&1; then
                        $SUDO ln -sf "$(command -v chromium || command -v chromium-browser)" /usr/local/bin/google-chrome || true
                      else
                        echo "ERROR: Could not install Chrome/Chromium on Debian/Ubuntu."
                        exit 1
                      fi
                    fi

                  elif command -v dnf >/dev/null 2>&1; then
                    # RHEL/CentOS/Rocky/Alma: install Chromium and alias it
                    $SUDO dnf -y install epel-release || true
                    $SUDO dnf -y install chromium
                    if ! command -v chromium >/dev/null 2>&1; then
                      echo "ERROR: Could not install Chromium with dnf."
                      exit 1
                    fi
                    $SUDO ln -sf "$(command -v chromium)" /usr/local/bin/google-chrome || true

                  elif command -v yum >/dev/null 2>&1; then
                    $SUDO yum -y install epel-release || true
                    $SUDO yum -y install chromium
                    if ! command -v chromium >/dev/null 2>&1; then
                      echo "ERROR: Could not install Chromium with yum."
                      exit 1
                    fi
                    $SUDO ln -sf "$(command -v chromium)" /usr/local/bin/google-chrome || true

                  else
                    echo "ERROR: Unsupported OS for auto-install, or missing package manager."
                    echo "Please install Google Chrome/Chromium manually on this agent."
                    exit 1
                  fi

                  google-chrome --version || true
                '''
            }
        }

        stage('Environment Check') {
            steps {
                echo 'Checking environment and project structure...'
                sh 'java -version'
                sh 'mvn -version'
                sh 'google-chrome --version || true'
                sh 'ls -la'
                sh "ls -la ${env.PROJECT_DIR}/"
                sh "ls -la ${env.PROJECT_DIR}/src/ || echo 'No src directory'"
            }
        }

        stage('Build') {
            steps {
                echo 'Building the SauceDemo Selenium project...'
                dir(env.PROJECT_DIR) {
                    sh 'pwd'
                    sh 'ls -la'
                    sh 'mvn clean compile -DskipTests'
                    echo 'Build completed successfully!'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running Selenium tests...'
                dir(env.PROJECT_DIR) {
                    script {
                        def testCommand = "mvn test -P${params.BROWSER}"
                        if (params.BROWSER == 'chrome-headless') {
                            testCommand += " -Dheadless=true"
                        }
                        if (params.TEST_SUITE != 'all') {
                            testCommand += " -Dtest=*${params.TEST_SUITE.capitalize()}Test"
                        }

                        echo "Executing command: ${testCommand}"

                        try {
                            sh testCommand
                            echo "Tests completed successfully!"
                        } catch (Exception e) {
                            echo "Tests failed but continuing with reports: ${e.message}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
            post {
                always {
                    echo 'Publishing test results...'
                    dir(env.PROJECT_DIR) {
                        // Use your preferred publisher (switch to junit if needed)
                        publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'

                        archiveArtifacts artifacts: 'test-output/**/*',
                                         fingerprint: true,
                                         allowEmptyArchive: true

                        script {
                            if (fileExists('test-output')) {
                                publishHTML([
                                    allowMissing: true,
                                    alwaysLinkToLastBuild: true,
                                    keepAll: true,
                                    reportDir: 'test-output',
                                    reportFiles: '*.html',
                                    reportName: 'SauceDemo Test Report'
                                ])
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'SauceDemo pipeline execution completed'
        }
        success {
            echo 'SauceDemo tests passed successfully!'
        }
        failure {
            echo 'SauceDemo pipeline failed!'
        }
        unstable {
            echo 'Some SauceDemo tests failed - build is unstable'
        }
    }
}
